'Z' < 'a' = true
"abc" <= "ab" = false (plus long)
"abc" >= "ac" = true    --> false car dans l'ordre b>c
1+2*3 = 7
5.0-4.2/2.1 = 3.0
3>4 || 5<6 && not (7/=8) = false car  logique 
faux    vrais et not vrai

if 6 < 10 then 6.0 else 10.0 = 6.0

pb :
    18 mod 7 / 2 = 18mod(7/2) mod est def pour les entiers et mod est une fonction pas opérateur donc manque les ` ̀ 

    if 2 < 3 then 3 manque le else !

    1 < 2 and 5 > 3 pas le and mais &&


    6 + 7 div 2 `` ou div(6+7)+2


    4. + 3.5  -> 4.0 !

    1.0 < 2.0 or 3 > 4 pas de or -> ||

    1.0 = 3  -> 1.0==3.0


    if 4 > 4.5 then 3.0 else 'a' -> pas le meme type renvoyé



    2 < 1 bool

    4.2 + 2.0 double ou Fractional a =>a

    4.2 + 2 comme au dessus

    4 + 2 int ou Num a=>a

    (4::Int) + 2 int

    floor 2.3 int

    fromIntegral 3  double ou fractional

    succ 2.2  

    succ 2

    succ (2::Int)

    succ 'b'

    show 2  string

    show 2.4 string



    [1,2,3] !! ([1,2,3] !! 1)  => renvoi 3 premiere partie renvoi 2 (tableau commence a 0)

    head [1,2,3] => renvoi 1

    tail [1,2,3] => 2,3

    "a":["b","c"] => ["a","b","c"]

    "abc" ++ "d" => abcd

    tail "abc" ++ "d" => bcd

    head "abc" : "d" => ad

    ([1,2,3] !! 2 : []) ++ [3,4] => [3,3,4]

    [3,2] ++ [1,2,3] !! head [1,2] : [] => 3,2,2
	3,2   1,2,3	!!	1



    head [] vide

    tail [] vide

    ["n"]:["o","n","!"] => a -> [a] -> [a] pb de crochet du cou

    1 ++ 2	=> pas des listes

    head "abc" ++ "d" => pb de crochet donc soit [head..]++"d"




    ['a', 'b', 'c'] [char]

    ('a', 'b', 'c') (char,char,char)

    [(False, 0), (True, 1)] [(bool,int)]

    ([False, True], [0, 1]) ([bool],[num])

    [tail, init, reverse] [[a]->[a]]

    (1.5,("3",[4,5]))(float,(string,[num]))

    [[1,2],[]] [[num]]

    (['a','b'],[[],[1,2,3]]) ([char],[int])



    second xs = head (tail xs)  second :: [xs] -> xs

    swap (x, y) = (y, x) swap::(x,y) -> (x,y)

    pair x y = (x, y) pair::x,y -> (x,y)

    double x = x*2 double::x -> x

    palindrome xs = reverse xs == xs palindrome::xs -> xs

    twice f x = f (f x) twice::Function, x -> x




